(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('scheduler')) :
	typeof define === 'function' && define.amd ? define(['react', 'scheduler'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory(global.React, global.scheduler));
})(this, (function (React, scheduler) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	//函数式组件
	const FunctionComponent = 0;
	//React.render(<App />, document.getElementById('root'))这里的根节点,这个dom对应的Fiber
	const HostRoot = 3;
	//原生标签 如<div></div>
	const HostComponent = 5;
	//<div>123</div>中的123
	const HostText = 6;
	//<></>
	const Fragment = 7;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	//代表当前fiber本次更新存在副作用
	const PassiveEffect = 0b0001000;
	// export const NoFlags = 0b0000001;
	// export const Placement = 0b0000010;
	// export const Update = 0b0000100;
	// export const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;
	const PassiveMask = PassiveEffect | ChildDeletion;

	const SyncLane = 0b0001;
	const NoLane = 0b0000;
	const NoLanes = 0b0000;
	function mergeLanes(leftLanes, rightLane) {
	    return leftLanes | rightLane;
	}
	function requestUpdateLanes() {
	    return SyncLane;
	}
	function getHighestPriorityLane(lanes) {
	    return lanes & -lanes;
	}
	function markRootFinished(root, lane) {
	    root.pendingLanes &= ~lane;
	}

	//双缓冲技术：
	//current:与视图中真实ui对应的fibernode树，每个节点称为current
	//workInProgress:触发更新后，正在reconciler中计算的fibernode树，每个节点称为workInProgress
	//react中以DFS的方式遍历ReactElement,如果有子节点遍历子节点,如果没有子节点,则遍历兄弟节点
	class FiberNode {
	    type;
	    tag;
	    key;
	    stateNode;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    updateQueue;
	    //如果是current,则指向workInProgress,如果是workInProgress,则指向current
	    alternate;
	    flags;
	    subtreeFlags;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        //实例属性
	        this.tag = tag;
	        //key默认值为null
	        this.key = key || null;
	        //<div></div>等HostComponent的真实dom节点
	        this.stateNode = null;
	        //比如对于FucntionComponent, tag=0,type为()=>{}函数本身
	        this.type = null;
	        //作为树状结构
	        //指向父fibernode节点
	        this.return = null;
	        //指向右边的兄弟fibernode节点
	        this.sibling = null;
	        this.child = null;
	        //如ul标签中有三个li标签,那么第一个li标签的index为0,第二个为1,第三个为2
	        this.index = 0;
	        this.ref = null;
	        //作为工作单元
	        //刚开始工作时的props
	        this.pendingProps = pendingProps;
	        //工作完成后的props
	        this.memoizedProps = null;
	        //工作完成后的状态
	        this.memoizedState = null;
	        //更新队列
	        this.updateQueue = null;
	        this.alternate = null;
	        //副作用标签
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	//ReactDom.createRoot(rootElement).render(<App/>)
	//当前应用统一根节点：FiberRootNode,hostRootFiber:传入的rootElement这个dom对应的Fiber节点，类型为HostRoot,App:<App/>
	//FiberRootNode的current指向hostrootFiber，hostRootFiber的stateNode指向FiberRootNode
	class FiberRootNode {
	    container;
	    current;
	    //指向更新完成后的hostRootFiber
	    finishedWork;
	    pendingLanes;
	    finishedLane;
	    pendingPassiveEffects;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	        this.pendingLanes = NoLanes;
	        this.finishedLane = NoLane;
	        this.pendingPassiveEffects = {
	            unmount: [],
	            update: []
	        };
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        //mount时
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        //update时
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    //函数式组件的type为函数本身
	    if (typeof type === 'string') {
	        //<div></div> type:div   typeof:string
	        //HostText不存在fibernode
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}
	function createFiberFromFragment(elements, key) {
	    const fiber = new FiberNode(Fragment, elements, key);
	    return fiber;
	}

	const createUpdate = (action, lane) => {
	    return {
	        action,
	        lane,
	        next: null
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    const pending = updateQueue.shared.pending;
	    if (pending === null) {
	        update.next = update;
	    }
	    else {
	        //c->a->b->c
	        update.next = pending.next;
	        pending.next = update;
	    }
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate, renderLane) => {
	    //ReturnType获取函数返回值类型
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        //环状链表中的第一个update
	        const first = pendingUpdate.next;
	        let pending = pendingUpdate.next;
	        do {
	            const updatelane = pending.lane;
	            if (updatelane === renderLane) {
	                const action = pending.action;
	                if (action instanceof Function) {
	                    //baseState 1 update x=>4x ===>memoizedState:4
	                    baseState = action(baseState);
	                }
	                else {
	                    //baseState 1 update 2 ===>memoizedState:2
	                    baseState = action;
	                }
	            }
	            else {
	                console.error('不应该进入updatelane ！== renderLane逻辑');
	            }
	            pending = pending.next;
	        } while (pending !== first);
	    }
	    result.memoizedState = baseState;
	    return result;
	};

	const supportsSymbol = typeof Symbol === 'function' && Symbol.for;
	//宿主环境支持Symbol.for时，返回Symbol.for('react.element')，否则返回数字0xeac7
	const REACT_ELEMENT_TYPE = supportsSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportsSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	function childReconciler(shouldTrackEffects) {
	    function deleteChild(parentFiber, childToDelete) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        const deletions = parentFiber.deletions;
	        if (deletions === null) {
	            parentFiber.deletions = [childToDelete];
	            parentFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    function deleteRemainingChildren(parentFiber, currentFirstChild) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(parentFiber, childToDelete);
	            childToDelete = childToDelete.sibling;
	        }
	    }
	    function reconcileSingleElement(parentFiber, currentFiber, element) {
	        const key = element.key;
	        while (currentFiber !== null) {
	            //update时
	            if (currentFiber.key === key) {
	                //key相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        let props = element.props;
	                        //1->此处是为了将<></>中的元素取出来使用
	                        if (element.type === REACT_FRAGMENT_TYPE) {
	                            props = element.props.children;
	                        }
	                        //type也相同，可复用
	                        const existing = useFiber(currentFiber, props);
	                        existing.return = parentFiber;
	                        //当前节点可复用，剩余节点删除 A1B2C3->A1
	                        deleteRemainingChildren(parentFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    //key相同，type不同，删掉所有旧的
	                    deleteRemainingChildren(parentFiber, currentFiber);
	                    break;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型：', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                //删掉旧的
	                deleteChild(parentFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        //根据element创建fibernode
	        let fiber;
	        if (element.type === REACT_FRAGMENT_TYPE) {
	            fiber = createFiberFromFragment(element.props.children, key);
	        }
	        else {
	            fiber = createFiberFromElement(element);
	        }
	        fiber.return = parentFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(parentFiber, currentFiber, content) {
	        while (currentFiber !== null) {
	            //update时
	            if (currentFiber.tag === HostText) {
	                //类型没变，可复用
	                const existing = useFiber(currentFiber, { content });
	                existing.return = parentFiber;
	                deleteRemainingChildren(parentFiber, currentFiber.sibling);
	                return existing;
	            }
	            //比如本来是<div>,变成了hahaha
	            deleteChild(parentFiber, currentFiber);
	            currentFiber = currentFiber.sibling;
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = parentFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        //应该追踪副作用且fiber.alternate即current为空时（首屏渲染时）搭上Placement标记
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    function reconcileChildrenArray(parentFiber, currentFirstChild, newChild) {
	        //最后一个可复用fiber在current中的索引位置
	        let lastPlacedIndex = 0;
	        //创建的最后一个fiber
	        let lastNewFiber = null;
	        //创建的第一个fiber
	        let firstNewFiber = null;
	        //1.将current保存在fiber中
	        const existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            const keyToUse = current.key !== null ? current.key : current.index;
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        for (let i = 0; i < newChild.length; i++) {
	            //2.遍历newChild，寻找是否可复用
	            const after = newChild[i];
	            const newFiber = updateFromMap(parentFiber, existingChildren, i, after);
	            //xxx->false、null、···
	            if (newFiber === null) {
	                continue;
	            }
	            //3.标记移动还是插入
	            newFiber.index = i;
	            newFiber.return = parentFiber;
	            if (lastNewFiber === null) {
	                firstNewFiber = newFiber;
	                lastNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackEffects) {
	                continue;
	            }
	            const current = newFiber.alternate;
	            if (current !== null) {
	                const oldIndex = current.index;
	                if (oldIndex < lastPlacedIndex) {
	                    //移动
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    //不移动
	                    lastPlacedIndex = oldIndex;
	                }
	            }
	            else {
	                //插入
	                newFiber.flags |= Placement;
	            }
	        }
	        //4.将Map中剩下的标记为删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(parentFiber, fiber);
	        });
	        return firstNewFiber;
	    }
	    function updateFromMap(parentFiber, existingChildren, index, element) {
	        const keyToUse = element.key !== null ? element.key : index;
	        const before = existingChildren.get(keyToUse);
	        //HostText
	        if (typeof element === 'string' || typeof element === 'number') {
	            if (before) {
	                if (before.tag === HostText) {
	                    //可复用
	                    existingChildren.delete(keyToUse);
	                    return useFiber(before, { content: element + '' });
	                }
	            }
	            return new FiberNode(HostText, { content: element + '' }, null);
	        }
	        //ReactElement
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (element.type === REACT_FRAGMENT_TYPE) {
	                        //此处是直接构建了Fragment的fibernode,之后在beginwork的Fragment的case中取出children
	                        return updateFragment$1(parentFiber, before, element, keyToUse, existingChildren);
	                    }
	                    if (before) {
	                        if (before.type === element.type) {
	                            existingChildren.delete(keyToUse);
	                            return useFiber(before, element.props);
	                        }
	                    }
	                    return createFiberFromElement(element);
	            }
	            //TODO 数组类型
	            //如<ul><li></li>[<li/>,<li/>]</ul>
	            if (Array.isArray(element) && true) {
	                console.warn('还未实现数组类型child：', element);
	            }
	        }
	        if (Array.isArray(element)) {
	            return updateFragment$1(parentFiber, before, element, keyToUse, existingChildren);
	        }
	        return null;
	    }
	    return function reconcileChildFibers(parentFiber, currentFiber, newChild) {
	        //判断Fragment
	        const isUnkeyedTopLevelFragment = typeof newChild === 'object' &&
	            newChild !== null &&
	            newChild.type === REACT_FRAGMENT_TYPE &&
	            newChild.key === null;
	        if (isUnkeyedTopLevelFragment) {
	            newChild = newChild.props.children;
	        }
	        //单节点
	        if (typeof newChild === 'object' && newChild !== null) {
	            //多节点
	            if (Array.isArray(newChild)) {
	                return reconcileChildrenArray(parentFiber, currentFiber, newChild);
	            }
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(parentFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        //文本节点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(parentFiber, currentFiber, newChild));
	        }
	        //兜底删除
	        if (currentFiber !== null) {
	            deleteRemainingChildren(parentFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    //取的是双缓存树中一个节点对应的另一个节点，并更新如pendingProps等的值，clone一定是current或wip反复使用，不会创造新的fibernode
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	function updateFragment$1(parentFiber, current, elements, key, existingChildren) {
	    let fiber;
	    if (!current || current.tag !== Fragment) {
	        fiber = createFiberFromFragment(elements, key);
	    }
	    else {
	        existingChildren.delete(key);
	        fiber = useFiber(current, elements);
	    }
	    fiber.return = parentFiber;
	    return fiber;
	}
	//update时
	const reconcileChildFibers = childReconciler(true);
	//mount时
	const mountChildFibers = childReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	//reconciler中引入，作为中转

	//useEffect
	const Passive = 0b0010;
	//代表hook存在副作用，即useEffect的回调函数需要被执行
	const hookHasEffect = 0b0001;

	//当前正在渲染的fibernode
	let currentlyRenderingFiber = null;
	let workInProgressHook = null;
	let currentHook = null;
	let renderLane = NoLane;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip, lane) {
	    //赋值操作
	    currentlyRenderingFiber = wip;
	    //重置
	    wip.memoizedState = null;
	    //重置effect链表
	    wip.updateQueue = null;
	    renderLane = lane;
	    const current = wip.alternate;
	    if (current !== null) {
	        //update时
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        //mount时,将当前使用的hooks的集合切换到mount时应该使用的hooks集合,此时内部数据共享层的current也发生了改变
	        //即React包使用的useState等方法都是mount集合的方法
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const pendingProps = wip.pendingProps;
	    const children = Component(pendingProps);
	    //重置操作
	    currentlyRenderingFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    renderLane = NoLane;
	    return children;
	}
	const HooksDispatcherOnMount = {
	    useState: mountState,
	    useEffect: mountEffect
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState,
	    useEffect: updateEffect
	};
	//void表示null或者undefined
	function pushEffect(hookFlags, create, destroy, deps) {
	    const effect = {
	        tag: hookFlags,
	        create,
	        destroy,
	        deps,
	        next: null
	    };
	    const fiber = currentlyRenderingFiber;
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue === null) {
	        const updateQueue = createFCUpdateQueue();
	        fiber.updateQueue = updateQueue;
	        effect.next = effect;
	        updateQueue.lastEffect = effect;
	    }
	    else {
	        //插入Effect到环状链表中
	        const lastEffect = updateQueue.lastEffect;
	        if (lastEffect === null) {
	            effect.next = effect;
	            updateQueue.lastEffect = effect;
	        }
	        else {
	            const first = lastEffect.next;
	            effect.next = first;
	            lastEffect.next = effect;
	            updateQueue.lastEffect = effect;
	        }
	    }
	    return effect;
	}
	function createFCUpdateQueue() {
	    const updateQueue = createUpdateQueue();
	    updateQueue.lastEffect = null;
	    return updateQueue;
	}
	function mountEffect(create, deps) {
	    const hook = mountWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    //mountEffect在mount阶段触发，mount时需要处理副作用，执行useEffect的回调函数
	    currentlyRenderingFiber.flags |= PassiveEffect;
	    hook.memoizedState = pushEffect(Passive | hookHasEffect, create, 
	    //mount阶段没有销毁函数
	    undefined, nextDeps);
	}
	function updateEffect(create, deps) {
	    //按照顺序从hook链表中取出effect的hook
	    const hook = updateWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    let destroy;
	    if (currentHook !== null) {
	        //当前effect hook在上次更新时对应的Effect状态
	        const prevEffect = currentHook.memoizedState;
	        destroy = prevEffect.destroy;
	        if (nextDeps !== null) {
	            //浅比较依赖是否发生变化
	            const prevDeps = prevEffect.deps;
	            if (areHookInputsEqual(nextDeps, prevDeps)) {
	                //依赖没有发生变化，不需要更新
	                hook.memoizedState = pushEffect(Passive, create, destroy, nextDeps);
	                return;
	            }
	        }
	        //依赖发生变化,给fiber添加有副作用操作标记，给Effect的tag添加hookHasEffect标记，表示这个副作用需要执行回调
	        currentlyRenderingFiber.flags |= PassiveEffect;
	        hook.memoizedState = pushEffect(Passive | hookHasEffect, create, destroy, nextDeps);
	    }
	}
	function areHookInputsEqual(nextDeps, prevDeps) {
	    if (prevDeps === null || nextDeps === null) {
	        //useEffect(() => {})，没有传入依赖，每次都执行
	        return false;
	    }
	    for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	        if (Object.is(prevDeps[i], nextDeps[i])) {
	            continue;
	        }
	        return false;
	    }
	    return true;
	}
	//这里没传入参数，但其实React包调用useState时传入了参数，只是这里没有用到而从hook中取了
	function updateState() {
	    const hook = updateWorkInProgressHook();
	    //计算新的state
	    const queue = hook.updateQueue;
	    const pending = queue.shared.pending;
	    queue.shared.pending = null;
	    if (pending !== null) {
	        const { memoizedState } = processUpdateQueue(hook.memoizedState, pending, renderLane);
	        hook.memoizedState = memoizedState;
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function mountState(initialState) {
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    //可以通过window.dispatch的方法调用setState,虽然没人这么用
	    //通过bind预置了fiber和updateQueue两个参数，暴露出的dispatch方法只需要传入action即可
	    //即用户使用setState时传入的值，setState(1)或者setState(x=>4x)等
	    //@ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const lane = requestUpdateLanes();
	    const update = createUpdate(action, lane);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber, lane);
	}
	//比如在使用const [count, setCount] = useState(0)时，
	//useState(0)在mount过程中时会执行mountState(0)，mountState(0)会执行mountWorkInProgressHook()，
	//如果workInProgressHook为null，说明是第一个hook，此时会将wip.memoizedState指向workInProgressHook
	//否则将创建的hook加在hook链表的最后
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        //mount时，且为第一个hook
	        if (currentlyRenderingFiber === null) {
	            //在函数组件中执行useState时，currentlyRenderingFiber的值一定是函数组件对应的fibernode
	            //此处fibernode为null，说明不是在函数组件中执行useState
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        //mount时，且不是第一个hook
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}
	function updateWorkInProgressHook() {
	    //TODO render阶段触发的更新
	    let nextCurrentHook;
	    if (currentHook === null) {
	        //这是这个FC update时的第一个hook
	        const current = currentlyRenderingFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            //mount 但这应该是update调用，因此是错误的边界情况
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        //FC update时的第二个及以后的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        //u1 u2 u3 -> u1 u2 u3 u4,currentHook一直都是上一次mount或update时的u1 u2 u3
	        //当u4时，走else分支，nextCurrentHook=currentHook.next=null
	        //多出一个u4的情况可能出现在if(xxx){useState(0)}这种情况中
	        throw new Error(`组件${currentlyRenderingFiber?.type}本次执行的hook数量超过了上次执行的数量`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        //update时，且为第一个hook
	        if (currentlyRenderingFiber === null) {
	            //在函数组件中执行useState时，currentlyRenderingFiber的值一定是函数组件对应的fibernode
	            //此处fibernode为null，说明不是在函数组件中执行useState
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        //mount时，且不是第一个hook
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}

	//递归中的递阶段
	const beginWork = (wip, renderLane) => {
	    //比较，返回子fibernode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip, renderLane);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip, renderLane);
	        case Fragment:
	            return updateFragment(wip);
	        default:
	            {
	                console.warn('beginWork未实现的部分。');
	            }
	            break;
	    }
	    return null;
	};
	function updateHostRoot(wip, renderLane) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending, renderLane);
	    //<App/>为此处的pending的Update包含的参数，ReactElementType类型，不是function，因此memoizedState就是<App/>
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcilerChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcilerChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFunctionComponent(wip, renderLane) {
	    const nextChildren = renderWithHooks(wip, renderLane);
	    reconcilerChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFragment(wip) {
	    const nextChildren = wip.pendingProps;
	    reconcilerChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcilerChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        //update时
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        //mount时
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const elementPropsKey = '__props';
	const validEventTypeList = ['click'];
	function updateFiberProps(node, props) {
	    node[elementPropsKey] = props;
	}
	function initEvent(container, eventType) {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('不支持的事件类型：', eventType);
	        return;
	    }
	    {
	        console.log('初始化事件：', eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	}
	function getEventCallbackNameFromEventType(eventType) {
	    return {
	        click: ['onClickCapture', 'onClick']
	    }[eventType];
	}
	function dispatchEvent(container, eventType, e) {
	    const targetElement = e.target;
	    if (targetElement === null) {
	        console.warn('事件没有target', e);
	        return;
	    }
	    //1.收集从element到container沿途的事件
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    //2.构造合成事件
	    const se = createSyntheticEvent(e);
	    //3.遍历capture
	    triggerEventFlow(capture, se);
	    if (!se.__stopPropagation) {
	        //4.遍历bubble
	        triggerEventFlow(bubble, se);
	    }
	}
	function triggerEventFlow(paths, se) {
	    for (let i = 0; i < paths.length; i++) {
	        const eventCallback = paths[i];
	        eventCallback.call(null, se);
	        if (se.__stopPropagation) {
	            break;
	        }
	    }
	}
	function createSyntheticEvent(e) {
	    const syntheticEvent = e;
	    syntheticEvent.__stopPropagation = false;
	    const originalStopPropagation = syntheticEvent.stopPropagation;
	    syntheticEvent.stopPropagation = () => {
	        syntheticEvent.__stopPropagation = true;
	        if (originalStopPropagation) {
	            originalStopPropagation();
	        }
	    };
	    return syntheticEvent;
	}
	function collectPaths(targetElement, container, eventType) {
	    const paths = {
	        capture: [],
	        bubble: []
	    };
	    while (targetElement && targetElement !== container) {
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const eventCallback = elementProps[callbackName];
	                    if (eventCallback) {
	                        //捕获阶段事件执行顺序：从外到内，冒泡阶段事件执行顺序：从内到外
	                        if (i === 0) {
	                            //capture
	                            paths.capture.unshift(eventCallback);
	                        }
	                        else {
	                            //bubble
	                            paths.bubble.push(eventCallback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	}

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type, props) => {
	    //TODO 处理props
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;
	const commitUpdate = (fiber) => {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps?.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        case HostComponent:
	            return updateFiberProps(fiber.stateNode, fiber.memoizedProps);
	        default:
	            {
	                console.warn('未实现的Update类型：', fiber);
	            }
	            break;
	    }
	};
	const commitTextUpdate = (textInstance, content) => {
	    textInstance.textContent = content;
	};
	const removeChild = (child, container) => {
	    container.removeChild(child);
	};
	const insertChildToContainer = (child, container, before) => {
	    container.insertBefore(child, before);
	};
	const scheduleMicroTask = typeof queueMicrotask === 'function'
	    ? queueMicrotask
	    : typeof Promise === 'function'
	        ? (callback) => Promise.resolve(null).then(callback)
	        : setTimeout;

	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	//递归中的归阶段
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostRoot:
	        case FunctionComponent:
	        case Fragment:
	            bubbleProperties(wip);
	            return null;
	        case HostComponent:
	            if (current !== null && wip.stateNode) {
	                //update
	                //对于HostComponent，stateNode就是dom
	                //1.props是否变化 {onClick=xx}->{onClick=xxx}
	                //2.变化了，Update Flag
	                //fiberNode.updateQueue=[n,n+1,n+2,n+3]([key,value,key,value])
	                markUpdate(wip);
	            }
	            else {
	                //1.构建Dom
	                const instance = createInstance(wip.type, newProps);
	                //2.将Dom插入到Dom树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                //update
	                const oldText = current.memoizedProps?.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                //1.构建Dom
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('completeWork未实现的部分 : ', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        //为<div></div>等dom对应的fibernode或文本节点对应的fibernode时直接添加到dom中
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child != null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let nextEffect = null;
	const commitMutationEffects = (finishedWork, root) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !==
	            NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            //遍历到了叶子结点或subtreeFlags&MutationMask===NoFlags即没有变化的部分，需要向上遍历
	            //DFS,但不一定为叶子结点，可能是subtreeFlags为NoFlags的节点
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect, root);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork, root) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        //a=0b0010,b=0b0110;  b=b&~a; => b=0b0100
	        finishedWork.flags &= ~Placement;
	    }
	    //flags update
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    //flags childrenDeletion
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((childToDelete) => {
	                commitDeletion(childToDelete, root);
	            });
	        }
	        finishedWork.flags &= ~ChildDeletion;
	    }
	    if ((flags & PassiveEffect) !== NoFlags) {
	        commitPassiveEffects(finishedWork, root, 'update');
	        finishedWork.flags &= ~PassiveEffect;
	    }
	};
	function commitPassiveEffects(fiber, root, type) {
	    if (fiber.tag !== FunctionComponent ||
	        (type === 'update' && (fiber.flags & PassiveEffect) === NoFlags)) {
	        return;
	    }
	    //副作用存储在functionComponent的FiberNode节点的updateQueue中
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue !== null) {
	        if (updateQueue.lastEffect === null && true) {
	            console.error('当FC存在passiveEffects的flags时，updateQueue.lastEffect不应该为null');
	        }
	        root.pendingPassiveEffects[type].push(updateQueue.lastEffect);
	    }
	}
	function commitHookEffectList(flags, lastEffect, callback) {
	    let effect = lastEffect.next;
	    do {
	        if ((effect.tag & flags) === flags) {
	            callback(effect);
	        }
	        effect = effect.next;
	    } while (effect !== lastEffect.next);
	}
	//卸载
	function commitHookEffectListUnmount(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	        //执行到这里说明FC已经卸载了，那么后续create不会执行
	        effect.tag &= ~hookHasEffect;
	    });
	}
	//触发所有上次更新的destroy
	function commitHookEffectListDestroy(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	    });
	}
	//执行所有create回调
	function commitHookEffectListCreate(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const create = effect.create;
	        if (typeof create === 'function') {
	            effect.destroy = create();
	        }
	    });
	}
	function recordHostChildrenToDelete(childrenToDelete, unmountFiber) {
	    //1.找到第一个root Host节点
	    const lastOne = childrenToDelete[childrenToDelete.length - 1];
	    if (!lastOne) {
	        childrenToDelete.push(unmountFiber);
	    }
	    else {
	        let node = lastOne.sibling;
	        while (node !== null) {
	            if (node === unmountFiber) {
	                childrenToDelete.push(node);
	            }
	            node = node.sibling;
	        }
	    }
	    //2.每找到一个root Host节点，判断这个节点是不是1中的节点的兄弟节点
	}
	function commitDeletion(childToDelete, root) {
	    const rootChildrenToDelete = [];
	    //递归子树
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                //第一次遍历到的HostComponent就是rootHostNode
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                //TODO 解绑ref
	                return;
	            case HostText:
	                //可能子树没有HostComponent，只有HostText，那么rootHostNode就是HostText
	                // if (rootHostNode === null) {
	                // 	rootHostNode = unmountFiber;
	                // }
	                recordHostChildrenToDelete(rootChildrenToDelete, unmountFiber);
	                return;
	            case FunctionComponent:
	                commitPassiveEffects(unmountFiber, root, 'unmount');
	                //TODO 解绑ref
	                return;
	            default:
	                {
	                    console.warn('未处理的unmount类型：', unmountFiber);
	                }
	        }
	    });
	    //删除rootHostNode的dom节点
	    if (rootChildrenToDelete.length) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent !== null) {
	            rootChildrenToDelete.forEach((node) => {
	                removeChild(node.stateNode, hostParent);
	            });
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	}
	function commitNestedComponent(root, onCommitUnmount) {
	    let node = root;
	    while (true) {
	        //对遍历到的每个节点执行onCommitUnmount
	        onCommitUnmount(node);
	        //向下遍历
	        if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root) {
	            return;
	        }
	        //向右遍历
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作:', finishedWork);
	    }
	    //parent dom
	    const hostParent = getHostParent(finishedWork);
	    //siblings dom
	    const sibling = getHostSibling(finishedWork);
	    //finishedWork dom
	    if (hostParent !== null) {
	        insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, sibling);
	    }
	};
	function getHostSibling(fiber) {
	    let node = fiber;
	    findSibling: while (true) {
	        while (node.sibling === null) {
	            const parent = node.return;
	            if (parent === null ||
	                parent.tag === HostRoot ||
	                parent.tag === HostComponent) {
	                return null;
	            }
	            node = parent;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	        while (node.tag !== HostComponent && node.tag !== HostText) {
	            //向下遍历
	            //node节点必须是稳定节点，此处说明node是要移动的节点
	            if ((node.flags & Placement) !== NoFlags) {
	                continue findSibling;
	            }
	            if (node.child === null) {
	                continue findSibling;
	            }
	            else {
	                node.child.return = node;
	                node = node.child;
	            }
	        }
	        if ((node.flags & Placement) === NoFlags) {
	            return node.stateNode;
	        }
	    }
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        //HostComponent HostRoot
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到host parent');
	    }
	    return null;
	}
	function insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, before) {
	    //fiber 宿主环境节点host ，类型只可能是HostComponent、HostText,
	    //HostRoot不会在此处作为被插入到父级的节点，因为HostRoot被插入到FiberRootNode的container中
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        //stateNode指向宿主环境的dom节点
	        if (before) {
	            insertChildToContainer(finishedWork.stateNode, hostParent, before);
	        }
	        else {
	            appendChildToContainer(hostParent, finishedWork.stateNode);
	        }
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        insertOrAppendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	let syncQueue = null;
	let isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	    if (syncQueue === null) {
	        syncQueue = [callback];
	    }
	    else {
	        syncQueue.push(callback);
	    }
	}
	function flushSyncCallbacks() {
	    if (!isFlushingSyncQueue && syncQueue) {
	        isFlushingSyncQueue = true;
	        try {
	            syncQueue.forEach((callback) => callback());
	        }
	        catch (error) {
	            {
	                console.error('flushSyncCallbacks error:', error);
	            }
	        }
	        finally {
	            isFlushingSyncQueue = false;
	            syncQueue = null;
	        }
	    }
	}

	//当前正在进行的工作单元节点
	let workInProgress = null;
	let wipRootRenderLane = NoLane;
	//避免commitRoot重复调用
	let rootDoesHasPassiveEffects = false;
	function initWorkLoop(root, lane) {
	    workInProgress = createWorkInProgress(root.current, {});
	    wipRootRenderLane = lane;
	}
	function scheduleUpdateOnFiber(fiber, lane) {
	    //TODO 调度功能
	    //找到FiberRootNode,为了同时满足render时和setState时
	    const root = markUpdateFromFiberToRoot(fiber);
	    markRootUpdated(root, lane);
	    ensureRootIsScheduled(root);
	}
	function markRootUpdated(root, lane) {
	    root.pendingLanes = mergeLanes(root.pendingLanes, lane);
	}
	function ensureRootIsScheduled(root) {
	    const updatelane = getHighestPriorityLane(root.pendingLanes);
	    if (updatelane === NoLane) {
	        return;
	    }
	    if (updatelane === SyncLane) {
	        //同步优先级，微任务调用
	        {
	            console.log('在微任务中调度，优先级：', updatelane);
	        }
	        //callback放入syncQueue中
	        scheduleSyncCallback(
	        //这里调用bind是为了让syncQueue中的这个callback在执行时就已经包含了root和updatelane	这两个参数
	        // 比如连续执行了三次setSatate，那么有三个performSyncWorkOnRoot被加入syncQueue,flushSyncCallbacks也会执行三次，
	        // 但第一次执行flushSyncCallbacks时isFlushingSyncQueue被修改为true，不会出现三个flushSyncCallbacks一起执行的现象，
	        // 同时第一次执行好之后，执行另外两个时虽然isFlushingSyncQueue为false，但syncQueue已经在第一次执行后重置为null，因此相当于这三个flushSyncCallbacks只会执行第一次，
	        // 因为flushSyncCallbacks是微任务中调用，因此第一次flushSyncCallbacks时，queue中就已经添加了三次performSyncWorkOnRoot，即批处理
	        // 由于syncQueue中有三个performSyncWorkOnRoot，需要在performSyncWorkOnRoot中对nextLane进行重新判断处理
	        // 第一个performSyncWorkOnRoot执行完后root.pendingLanes的syncLane已经被去掉，因此后面两个performSyncWorkOnRoot不会执行
	        performSyncWorkOnRoot.bind(null, root, updatelane));
	        //以微任务方式执行flushSyncCallbacks
	        scheduleMicroTask(flushSyncCallbacks);
	    }
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = fiber.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function performSyncWorkOnRoot(root, lane) {
	    const nextLane = getHighestPriorityLane(root.pendingLanes);
	    //比如连续调用三次setState，其实syncQueue中第一个performSyncWorkOnRoot执行时，因为调用了fiberbook中三次dispatch,调用了三次scheduleupdateonfiber,queue中已经有了三个update
	    //但是updateState只需要执行一次，因此其实第一个callback执行时就已经完成了更新，commit之后去掉syncLane标记，避免之后两次重复执行performSyncWorkOnRoot
	    if (nextLane !== SyncLane) {
	        //其他比SyncLane更高的优先级
	        //NoLane
	        ensureRootIsScheduled(root);
	        return;
	    }
	    {
	        console.warn('render阶段开始');
	    }
	    //初始化
	    initWorkLoop(root, lane);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop error:', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    //即已经计算完成的wip，就是当前current树的alternate
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    root.finishedLane = lane;
	    wipRootRenderLane = NoLane;
	    //wip fibernode树中的flags
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始:', finishedWork);
	    }
	    const lane = root.finishedLane;
	    if (lane === NoLane) {
	        console.error('commit阶段finishedLane不应该为NoLane！');
	    }
	    //重置
	    root.finishedWork = null;
	    root.finishedLane = NoLane;
	    markRootFinished(root, lane);
	    if ((finishedWork.flags & PassiveMask) !== NoFlags ||
	        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags) {
	        if (!rootDoesHasPassiveEffects) {
	            rootDoesHasPassiveEffects = true;
	            //调度副作用
	            //采用了scheduler提供的scheduleCallback方法，第一个参数为调度优先级，这里等于在setTimeout中调用
	            scheduler.unstable_scheduleCallback(scheduler.unstable_NormalPriority, () => {
	                //调度已经完成，异步执行副作用
	                flushPassiveEffects(root.pendingPassiveEffects);
	                return;
	            });
	        }
	    }
	    //判断是否存在三个子阶段需要的操作
	    //root flags root subtreeflags
	    const subtreeHasEffects = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffects || rootHasEffect) {
	        //beforeMutation阶段
	        //mutation阶段
	        commitMutationEffects(finishedWork, root);
	        //mutation阶段结束layout阶段开始之间的操作
	        //finishedWork为本次更新的wip，将它赋值给current变成current树
	        root.current = finishedWork;
	        //layout阶段
	    }
	    else {
	        root.current = finishedWork;
	    }
	    rootDoesHasPassiveEffects = false;
	    ensureRootIsScheduled(root);
	}
	function flushPassiveEffects(pendingPassiveEffects) {
	    pendingPassiveEffects.unmount.forEach((effect) => {
	        //传入Passive，表示是useEffect的副作用
	        commitHookEffectListUnmount(Passive, effect);
	    });
	    pendingPassiveEffects.unmount = [];
	    pendingPassiveEffects.update.forEach((effect) => {
	        //必须同时具有Passive和hookHasEffect，副作用才会执行
	        commitHookEffectListDestroy(Passive | hookHasEffect, effect);
	    });
	    pendingPassiveEffects.update.forEach((effect) => {
	        //必须同时具有Passive和hookHasEffect，副作用才会执行
	        commitHookEffectListCreate(Passive | hookHasEffect, effect);
	    });
	    pendingPassiveEffects.update = [];
	    //***因为useEffect过程中也有可能触发新的更新，比如useEffect中使用setState,因此执行完effect之后马上执行flushSyncCallbacks，保证更新执行
	    flushSyncCallbacks();
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    //beginWork返回子fibernode
	    const next = beginWork(fiber, wipRootRenderLane);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	//ReactDom.createRoot(rootElement)时会调用的方法
	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	};
	//ReactDom.createRoot(rootElement).render的render方法被调用时触发的方法，更新
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const lane = requestUpdateLanes();
	    const update = createUpdate(element, lane);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber, lane);
	    return element;
	};

	// ReactDOM.createRoot(root).render(<App/>);
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
