(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["jsx-dev-runtime"] = {}));
})(this, (function (exports) { 'use strict';

	const supportsSymbol = typeof Symbol === 'function' && Symbol.for;
	//宿主环境支持Symbol.for时，返回Symbol.for('react.element')，否则返回数字0xeac7
	const REACT_ELEMENT_TYPE = supportsSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportsSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;

	//ReactElement
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'Yaohui'
	    };
	    return element;
	};
	const isValidElement = (object) => {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	};
	const Fragment = REACT_FRAGMENT_TYPE;
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        //判断这个key为prop的属性是config自己的属性而不是原型链上的属性，仅将自己的属性复制给props
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    //处理children
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        //child | [child,child,child ...]
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	//jsxDev和jsx的区别主要体现在maybeChildren的处理上,产生这种区别的原因是因为jsxDev是在开发环境下使用的，而jsx是在生产环境下使用的
	//开发环境和生产环境下传给jsx或者jsxDev的参数是不同的
	const jsxDEV = (type, config) => {
	    const props = {};
	    let key = null;
	    let ref = null;
	    for (const prop in config) {
	        const value = config[prop];
	        if (prop === 'key') {
	            if (value !== undefined) {
	                key = '' + value;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (value !== undefined) {
	                ref = value;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = value;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	exports.Fragment = Fragment;
	exports.isValidElement = isValidElement;
	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
