(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const supportsSymbol = typeof Symbol === 'function' && Symbol.for;
	//宿主环境支持Symbol.for时，返回Symbol.for('react.element')，否则返回数字0xeac7
	const REACT_ELEMENT_TYPE = supportsSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	//ReactElement
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'Yaohui'
	    };
	    return element;
	};
	//jsxDev和jsx的区别主要体现在maybeChildren的处理上,产生这种区别的原因是因为jsxDev是在开发环境下使用的，而jsx是在生产环境下使用的
	//开发环境和生产环境下传给jsx或者jsxDev的参数是不同的
	const jsxDEV = (type, config) => {
	    const props = {};
	    let key = null;
	    let ref = null;
	    for (const prop in config) {
	        const value = config[prop];
	        if (prop === 'key') {
	            if (value !== undefined) {
	                key = '' + value;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (value !== undefined) {
	                ref = value;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = value;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	//React
	var index = {
	    version: '0.0.0',
	    createElement: jsxDEV
	};

	return index;

}));
